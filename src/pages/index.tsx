import Head from 'next/head';
import {
  SandpackLayout,
  SandpackPreview,
  SandpackProvider,
  useSandpack,
} from '@codesandbox/sandpack-react';
import {useEffect, useRef, useState} from 'react';
import {
  Box,
  Button,
  Center,
  Container,
  Flex,
  Spinner,
  Text,
  Textarea,
  useToast,
} from '@chakra-ui/react';

function Page() {
  const {sandpack} = useSandpack();

  const toast = useToast();
  const inputRef = useRef<HTMLTextAreaElement>(null);
  const formRef = useRef<HTMLFormElement>(null);
  const [isLoading, setIsLoading] = useState(false);
  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const {code} = sandpack.files['/App.js'];
      const formData = new FormData(e.currentTarget);
      const prompt = formData.get('prompt');

      const result = await fetch('/api/code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({prompt, code}),
      });

      const data = await result.json();
      sandpack.updateFile('/App.js', data.code);
      if (inputRef.current?.value) inputRef.current.value = '';
      inputRef.current?.focus();
    } catch (error) {
      toast({
        title: 'An error occurred.',
        description: (error as Error).message,
        status: 'error',
        duration: 9000,
        isClosable: true,
      });
    }
    setIsLoading(false);
  };

  const handleFix = async (errorMessage: string) => {
    setIsLoading(true);
    try {
      const {code} = sandpack.files['/App.js'];
      const result = await fetch('/api/fix', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({code, error: errorMessage}),
      });

      const data = await result.json();
      sandpack.updateFile('/App.js', data.code);
    } catch (error) {
      toast({
        title: 'An error occurred.',
        description: (error as Error).message,
        status: 'error',
        duration: 9000,
        isClosable: true,
      });
    }
    setIsLoading(false);
  };

  return (
    <Box h="100vh" bg="black">
      <Container
        maxW="container.xl"
        h="100vh"
        py={4}
        display="flex"
        flexDirection="column"
      >
        <Flex flex={1}>
          <SandpackLayout style={{height: '100%', width: '100%'}}>
            <SandpackPreview
              style={{
                height: '100%',
              }}
            />
          </SandpackLayout>
        </Flex>
        <form ref={formRef} onSubmit={handleSubmit}>
          <Textarea
            bg="white"
            ref={inputRef}
            name="prompt"
            required
            placeholder="Enter your prompt..."
            my={2}
          />
          <Flex direction="row" justify="space-between">
            <Button size="lg" type="submit" isLoading={isLoading}>
              Generate
            </Button>

            {sandpack?.error?.message && !isLoading && (
              <Button
                size="lg"
                colorScheme="red"
                type="button"
                onClick={() => {
                  if (sandpack?.error?.message) {
                    handleFix(sandpack?.error?.message);
                  } else {
                    toast({
                      title: 'An error occurred.',
                      description: 'No error message found.',
                      status: 'error',
                      duration: 9000,
                      isClosable: true,
                    });
                  }
                }}
              >
                Try to Fix
              </Button>
            )}
          </Flex>
        </form>
      </Container>
      {sandpack.status !== 'running' && (
        <Center
          h="100vh"
          w="100vw"
          position="absolute"
          top={0}
          left={0}
          bg="white"
          zIndex="overlay"
          display="flex"
          flexDirection="column"
        >
          <Spinner size="lg" />
          <Text fontSize="lg" mt={4}>
            Starting session
          </Text>
        </Center>
      )}
    </Box>
  );
}

export default function Home() {
  const [shouldRender, setShouldRender] = useState(false);

  useEffect(() => {
    setShouldRender(true);
  }, []);

  if (!shouldRender) {
    return null;
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SandpackProvider
        template="react"
        customSetup={{
          dependencies: {
            '@chakra-ui/react': 'latest',
            '@emotion/react': 'latest',
            '@emotion/styled': 'latest',
            'framer-motion': 'latest',
            'react-icons': 'latest',
          },
        }}
        files={{
          '/App.js': {
            active: true,
            code: /* js */ `
      import React from 'react';


      export default function App() {
        return (
          // Code goes here!
          null
        );
      }
   `,
          },

          '/index.js': {
            active: false,
            hidden: true,
            code: /* js */ `
      import {ChakraProvider} from '@chakra-ui/react';
      import React, { StrictMode } from "react";
      import { createRoot } from "react-dom/client";
      import "./styles.css";

      import App from "./App";

      const root = createRoot(document.getElementById("root"));
      root.render(
        <StrictMode>
          <ChakraProvider>
            <App />
          </ChakraProvider>
        </StrictMode>
      );
    `,
          },
        }}
      >
        <Page />
      </SandpackProvider>
    </>
  );
}
